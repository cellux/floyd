# an attempt to find a useful music notation language

# comments begin with '#' and extend to the end of line

# sfload <slot> <path>
#
# loads a soundfont into a slot
#
# <path> may be an absolute or relative path
#
# if relative, it will be searched in the current directory and
# in the directories listed in the SFPATH array
sfload 0 "FluidR3_GM.sf2"

# channel <channel>
#
# switches to the specified channel
channel 0

# sf <slot>
#
# switches to the specified soundfont on the current channel
sf 0

# bank <bank>
#
# switches to the specified bank on the current channel
bank 0

# program <program>
#
# selects the specified program on the current channel
program 0

# bpm <bpm>
#
# sets tempo in beats per minute
bpm 120

# dur <duration>
# ~ <duration>
#
# sets duration of played notes (in beats)
#
# the duration of a note is the time elapsed between a note-on
# and the corresponding note-off
#
# if duration is set to zero, only note-on events are sent
dur 1
~1

# delta <duration>
# > <duration>
#
# how much to wait between two successive notes (in beats)
delta 1/4
>1/4

# .
#
# waits for the amount of time previously set with `delta`
.
... # waits for 3 deltas

# wait <duration>
#
# waits for the given amount of beats
wait 1

# <notedesc>
#
# plays the note(s) described by <notedesc> on the current channel
c4
c4' # one semitone above c4 (each ' suffix adds one semitone)
c4` # one semitone below c4 (each ` suffix subtracts one semitone)
c4^ # one octave above c4 (each ^ suffix adds 12 semitones)
c4_ # one octave below c4 (each _ suffix subtracts 12 semitones)
c4,e4,g4 # a chord

# root <notedesc>
#
# sets the root note
root c4

# <notedesc> may also be an integer specifying a distance from the
# root note
0 0,4,7 . 0 4 7 . -7 . 0 .

# the distance may be expressed in scale degrees or semitones
#
# you can switch between the two interpretations
# with the commands `degrees` and `semitones`
degrees # this is the default
semitones

# using numeric note descriptors, the c4,e4,g4 chord can be also
# expressed as a list of distances from the root note
semitones 0,4,7
degrees 0,2,4

# scale <steps>
#
# defines the scale as a series of semitone steps
scale 2212221 # major scale (default)
scale 2122122 # minor scale

# three separate notes, a rest, then a chord
degrees -2 0 2 . 0,2,4

# shift <value>
# @ <value>
#
# shifts every scale degree in note descriptors by <value>
#
# can be used for musical modes (ionian, dorian, etc.)
shift 0 -2 0 2
@-3 -2 0 2
@0 -2 . .

# when we play notes with numeric note descriptors in `degrees`
# interpretation, we use a scale, a root note, a shift and a degree
#
# note = root + scale[shift + degree]
#
# (the scale wraps around as needed in both directions)

# vel <velocity>
# v <velocity>
#
# sets note velocity
vel 96

# bpm, vel (v), dur (~), delta (>) and shift (@)
# accept a number with a + or - suffix
#
# such a suffix results in relative adjustment of the value
vel 5- # set to 5 less than previous value
v5+    # set to 5 more than previous value

# let <name> <block>
#
# defines a named block of commands for later execution
#
# <name> must begin with $
let $scale {
  0 4 7 10 9 7 0
}

# <block>
#
# plays a previously defined block
$scale

# <block literal>
#
# plays the commands inside {...}
{ 6 5 4 3 2 1 }

# sched <block>
#
# plays a block in the background
sched {
  ~1 >1/4
  sched $scale
  sched { . $scale }
  # { ... } blocks do not return until all
  # scheduled sub-blocks finish execution
}

# rep <count> <block>
#
# repeat a block the given number of times
rep 4 { 0 2 4 5 3 -2 }

# (...)
#
# defines a block which plays its commands in the parent environment
#
# contrast this with {...} which plays its commands in a new empty
# environment linked to (inheriting from) its parent - this works
# somewhat like prototypal inheritance in JavaScript
{
  let $v1 (v96)
  let $v2 (v70)
  $v1 3 $v2 1 $v2 2 $v1 0
}
